{
	"42header.email": "adelille@student.42.fr",
	"42header.username": "adelille",
	"codam-norminette-3.ignoreErrors": [
		"WRONG_SCOPE_COMMENT",
		"EMPTY_LINE_FUNCTION"
	],
	"update.mode": "none",
	"workbench.colorTheme": "vity",
	"workbench.iconTheme": "material-icon-theme",
	"files.autoSave": "onWindowChange",
	"editor.formatOnSave": true,
	"editor.fontFamily": "'Roboto Mono', 'Droid Sans Mono', Consolas",
	"editor.insertSpaces": false,
	"editor.detectIndentation": false,
	"editor.renderFinalNewline": "off",
	"editor.autoClosingBrackets": "never",
	"editor.autoClosingQuotes": "never",
	"editor.inlineSuggest.enabled": true,
	"editor.codeActionsOnSave": {
		"source.organizeImports": true,
		"source.fixAll.eslint": true,
		"source.sortPackageJson": true
	},
	"explorer.confirmDragAndDrop": false,
	"problems.showCurrentInStatus": true,
	"workbench.startupEditor": "none",
	"workbench.panel.defaultLocation": "right",
	"security.workspace.trust.untrustedFiles": "open",
	"git.openRepositoryInParentFolders": "never",
	"github.copilot.enable": {
		"*": true,
		"plaintext": true,
		"markdown": true,
		"yaml": true
	},
	"terminal.integrated.inheritEnv": false,
	"vim.statusBarColorControl": true,
	"vim.statusBarColors.normal": "#0C0E14",
	"vim.statusBarColors.insert": "#731bb360",
	"vim.statusBarColors.visual": "#857a0030",
	"vim.statusBarColors.visualblock": "#00b2c930",
	"vim.statusBarColors.visualline": "#9c001d30",
	"workbench.colorCustomizations": {
		"editorLineNumber.activeForeground": "#DDDDDD",
		"editorCursor.background": "#0D1117",
		"editorCursor.foreground": "#D4B6CA",
		"editor.selectionBackground": "#ffe3e94d",
		"editorBracketMatch.background": "#ffe3e94d",
		"editorBracketMatch.border": "#ffffff00",
		"statusBar.noFolderBackground": "#731bb360",
		"statusBar.debuggingBackground": "#731bb360",
		"editorBracketHighlight.foreground1": "#f0f6fcc1",
		"editorBracketHighlight.foreground2": "#ffff2690",
		"editorBracketHighlight.foreground3": "#26ff9690",
		"editorBracketHighlight.foreground4": "#b43bff90",
		"editorBracketHighlight.foreground5": "#ff00f790",
		"editorBracketHighlight.foreground6": "#ff009d90",
		"statusBar.background": "#731bb360",
		"editorInlayHint.background": "#0000",
		"editorInlayHint.foreground": "#ffffff64",
		"statusBar.foreground": "#ffffff",
		"statusBar.debuggingForeground": "#ffffff",
		"activityBar.activeBorder": "#a277ff",
		"activityBar.foreground": "#61ffca",
		"activityBar.inactiveForeground": "#525156",
		"activityBarBadge.background": "#a277ff",
		"activityBarBadge.foreground": "#15141b",
		"badge.background": "#a277ff",
		"badge.foreground": "#15141b",
		"button.background": "#61ffca",
		"button.foreground": "#15141b",
		"button.hoverBackground": "#49c29a",
		"diffEditor.insertedTextBackground": "#00d89023",
		"diffEditor.removedTextBackground": "#ff474720",
		"dropdown.background": "#15141b",
		"dropdown.border": "#3b334b",
		"dropdown.foreground": "#cdccce",
		"editorGroup.border": "#000000",
		"editorGroup.dropBackground": "#3d375e7f",
		"editorGroupHeader.tabsBackground": "#15141b",
		"editorGroupHeader.tabsBorder": "#000000",
		"editorGutter.addedBackground": "#61ffca",
		"editorGutter.deletedBackground": "#ff6767",
		"editorGutter.modifiedBackground": "#ffca85",
		"panel.border": "#000000",
		"panelTitle.activeBorder": "#61ffca",
		"panelTitle.activeForeground": "#cdccce",
		"progressBar.background": "#61ffca",
		"scrollbar.shadow": "#15141b",
		"scrollbarSlider.activeBackground": "#3d375e7f",
		"scrollbarSlider.background": "#a394f033",
		"scrollbarSlider.hoverBackground": "#a394f033",
		"statusBar.border": "#000000",
		"statusBarItem.activeBackground": "#a277ff",
		"tab.activeBorderTop": "#61ffca",
		"tab.activeForeground": "#61ffca",
		"statusBarItem.hoverForeground": "#61ffca",
		"statusBarItem.remoteBackground": "#00000000",
		"statusBarItem.errorForeground": "#ff6767",
		"statusBarItem.warningForeground": "#ffca85",
		"list.hoverForeground": "#61ffca"
	},
	"editor.semanticTokenColorCustomizations": {
		"rules": {
			"*.mutable": {
				"fontStyle": "italic",
				"foreground": "#c24be3"
			}
		}
	},
	"[c]": {
		"editor.formatOnSave": false
	},
	"[cpp]": {
		"editor.formatOnSave": false
	},
	"[typescript]": {
		"editor.defaultFormatter": "vscode.typescript-language-features"
	},
	"typescript.format.placeOpenBraceOnNewLineForControlBlocks": true,
	"typescript.format.placeOpenBraceOnNewLineForFunctions": true,
	"[typescriptreact]": {
		"editor.defaultFormatter": "vscode.typescript-language-features"
	},
	"[javascript]": {
		"editor.formatOnSave": false
	},
	"[javascriptreact]": {
		"editor.formatOnSave": false
	},
	"[vue]": {
		"editor.defaultFormatter": "esbenp.prettier-vscode"
	},
	"[json]": {
		"editor.defaultFormatter": "vscode.json-language-features"
	},
	"[jsonc]": {
		"editor.defaultFormatter": "vscode.json-language-features"
	},
	"[scss]": {
		"editor.formatOnSave": false
	},
	"[css]": {
		"editor.defaultFormatter": "vscode.css-language-features"
	},
	"[python]": {
		"editor.insertSpaces": true,
		"editor.formatOnSave": true,
		"editor.formatOnType": true
	},
	"python.analysis.typeCheckingMode": "basic",
	"python.linting.pylintEnabled": true,
	"python.linting.enabled": true,
	"python.terminal.activateEnvironment": true,
	"python.analysis.extraPaths": [
		"./sources"
	],
	"python.formatting.provider": "yapf",
	/* Flutter/Dart automatically generated */
	// Causes the debug view to automatically appear when a breakpoint is hit. This
	// setting is global and not configurable per-language.
	"debug.openDebug": "openOnDebugBreak",
	// By default, VS Code will only switch to the Debug Console when you start
	// debugging the first time in a session. This setting tells VS Code to always
	// switch to the Debug Console when starting a session, so you can see the
	// programs output.
	// "debug.internalConsoleOptions": "openOnSessionStart",
	"[dart]": {
		// Automatically format code on save and during typing of certain characters
		// (like `;` and `}`).
		"editor.formatOnSave": true,
		"editor.formatOnType": true,
		// Disables built-in highlighting of words that match your selection. Without
		// this, all instances of the selected text will be highlighted, interfering
		// with Dart's ability to highlight only exact references to the selected variable.
		"editor.selectionHighlight": false,
		// By default, VS Code will pre-select the most recently used item from code
		// completion. This is usually not the most relevant item.
		//
		// "first" will always select top item
		// "recentlyUsedByPrefix" will filter the recently used items based on the
		//     text immediately preceding where completion was invoked.
		"editor.suggestSelection": "first",
		// Allows pressing <TAB> to complete snippets such as `for` even when the
		// completion list is not visible.
		"editor.tabCompletion": "onlySnippets",
		// By default, VS Code will populate code completion with words found in the
		// current file when a language service does not provide its own completions.
		// This results in code completion suggesting words when editing comments and
		// strings. This setting will prevent that.
		"editor.wordBasedSuggestions": false
	},
	"[markdown]": {
		"editor.defaultFormatter": "yzhang.markdown-all-in-one"
	},
	"[rust]": {
		"editor.defaultFormatter": "rust-lang.rust-analyzer",
		"editor.semanticHighlighting.enabled": false
	}
}